import {
  require_react
} from "./chunk-CMM6OKGN.js";
import {
  __toESM
} from "./chunk-OL46QLBJ.js";

// node_modules/@wojtekmaj/react-hooks/dist/esm/useCurrentPosition.js
var import_react = __toESM(require_react(), 1);
var isBrowser = typeof window !== "undefined";
function useCurrentPosition(options) {
  const [position, setPosition] = (0, import_react.useState)(null);
  (0, import_react.useEffect)(() => {
    if (!isBrowser || !("geolocation" in navigator)) {
      return void 0;
    }
    const onPositionReceive = (result) => {
      setPosition(result.coords);
    };
    navigator.geolocation.getCurrentPosition(onPositionReceive, void 0, options);
    const watch = navigator.geolocation.watchPosition(onPositionReceive, void 0, options);
    return () => {
      navigator.geolocation.clearWatch(watch);
    };
  }, [options]);
  return position;
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useDebouncedEffect.js
var import_react2 = __toESM(require_react(), 1);
function useDebouncedEffect(effect, deps, debounceTime = 250) {
  (0, import_react2.useEffect)(() => {
    let cleanup;
    const timeout = setTimeout(() => {
      cleanup = effect();
    }, debounceTime);
    return () => {
      clearTimeout(timeout);
      if (cleanup) {
        cleanup();
      }
    };
  }, deps);
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useDebouncedState.js
var import_react5 = __toESM(require_react(), 1);

// node_modules/@wojtekmaj/react-hooks/dist/esm/useDebouncedValue.js
var import_react4 = __toESM(require_react(), 1);

// node_modules/@wojtekmaj/react-hooks/dist/esm/useSetTimeout.js
var import_react3 = __toESM(require_react(), 1);
function useSetTimeout(fn, delay) {
  (0, import_react3.useEffect)(() => {
    const timeout = setTimeout(fn, delay);
    return () => clearTimeout(timeout);
  }, [fn, delay]);
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useDebouncedValue.js
function useDebouncedValue(value, debounceTime = 250) {
  const [debouncedValue, setDebouncedValue] = (0, import_react4.useState)(value);
  useSetTimeout(() => {
    setDebouncedValue(value);
  }, debounceTime);
  return debouncedValue;
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useDebouncedState.js
function useDebouncedState(initialValue, debounceTime = 250) {
  const [value, setValue] = (0, import_react5.useState)(initialValue);
  const debouncedValue = useDebouncedValue(value, debounceTime);
  return [debouncedValue, setValue];
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useEventListener.js
var import_react6 = __toESM(require_react(), 1);
function useEventListener(element, type, listener) {
  (0, import_react6.useEffect)(() => {
    if (!element) {
      return void 0;
    }
    element.addEventListener(type, listener);
    return () => {
      element.removeEventListener(type, listener);
    };
  }, [element, type, listener]);
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useIntersectionObserver.js
var import_react7 = __toESM(require_react(), 1);
function useIntersectionObserver(element, options, observerCallback) {
  (0, import_react7.useEffect)(() => {
    if (!element || !("IntersectionObserver" in window)) {
      return void 0;
    }
    const observer = new IntersectionObserver(observerCallback, options);
    observer.observe(element);
    return () => {
      observer.disconnect();
    };
  }, [element, options, observerCallback]);
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useLocalStorage.js
var import_react8 = __toESM(require_react(), 1);
var isBrowser2 = typeof window !== "undefined";
function useLocalStorage(key, initialState) {
  const [value, setValue] = (0, import_react8.useState)(() => {
    if (!isBrowser2) {
      return initialState;
    }
    const rawValue = localStorage.getItem(key);
    return rawValue !== null ? JSON.parse(rawValue) : initialState;
  });
  const onChange = (0, import_react8.useCallback)((nextValueOrFunction) => {
    const nextValue = nextValueOrFunction instanceof Function ? nextValueOrFunction(value) : nextValueOrFunction;
    if (isBrowser2) {
      localStorage.setItem(key, JSON.stringify(nextValue));
    }
    setValue(nextValue);
  }, [key, value]);
  const onStorage = (0, import_react8.useCallback)((event) => {
    if (event.key !== key) {
      return;
    }
    const { newValue: rawValue } = event;
    const nextValue = rawValue !== null ? JSON.parse(rawValue) : null;
    if (nextValue !== value) {
      setValue(nextValue);
    }
  }, [key, value]);
  useEventListener(isBrowser2 ? window : null, "storage", onStorage);
  return [value, onChange];
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useMatchMedia.js
var import_react9 = __toESM(require_react(), 1);
var isBrowser3 = typeof window !== "undefined";
function useMatchMedia(query) {
  const mql = (0, import_react9.useMemo)(() => isBrowser3 ? window.matchMedia(query) : null, [query]);
  const [matches, setMatches] = (0, import_react9.useState)(mql ? mql.matches : null);
  const handleMql = (0, import_react9.useCallback)((event) => {
    setMatches(event.matches);
  }, []);
  (0, import_react9.useEffect)(() => {
    if (!mql) {
      return void 0;
    }
    mql.addEventListener("change", handleMql);
    return () => {
      mql.removeEventListener("change", handleMql);
    };
  }, [mql, handleMql]);
  return matches;
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useMutationObserver.js
var import_react10 = __toESM(require_react(), 1);
function useMutationObserver(element, options, observerCallback) {
  (0, import_react10.useEffect)(() => {
    if (!element || !("MutationObserver" in window)) {
      return void 0;
    }
    const observer = new MutationObserver(observerCallback);
    observer.observe(element, options);
    return () => {
      observer.disconnect();
    };
  }, [element, options, observerCallback]);
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useOnLine.js
var import_react11 = __toESM(require_react(), 1);
var isBrowser4 = typeof window !== "undefined";
function useOnLine() {
  const [onLine, setOnLine] = (0, import_react11.useState)(isBrowser4 ? navigator.onLine : null);
  const handleOnline = (0, import_react11.useCallback)(() => {
    setOnLine(true);
  }, []);
  const handleOffline = (0, import_react11.useCallback)(() => {
    setOnLine(false);
  }, []);
  useEventListener(isBrowser4 ? window : null, "online", handleOnline);
  useEventListener(isBrowser4 ? window : null, "offline", handleOffline);
  return onLine;
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/usePermissionState.js
var import_react12 = __toESM(require_react(), 1);
var isBrowser5 = typeof window !== "undefined";
function usePermissionState({ name }) {
  const [state, setState] = (0, import_react12.useState)(() => {
    const areNavigatorPermissionsSupported = isBrowser5 && "permissions" in navigator;
    if (!areNavigatorPermissionsSupported) {
      return null;
    }
    if (name === "notifications") {
      const potentialState = Notification.permission;
      return potentialState === "default" ? "prompt" : potentialState;
    }
    return null;
  });
  (0, import_react12.useEffect)(() => {
    const areNavigatorPermissionsSupported = isBrowser5 && "permissions" in navigator;
    if (!areNavigatorPermissionsSupported) {
      return;
    }
    let permissionStatus;
    function onPermissionStatusChange() {
      setState(permissionStatus.state);
    }
    navigator.permissions.query({ name }).then((result) => {
      permissionStatus = result;
      setState(permissionStatus.state);
      permissionStatus.addEventListener("change", onPermissionStatusChange);
    });
    return () => {
      if (permissionStatus) {
        permissionStatus.removeEventListener("change", onPermissionStatusChange);
      }
    };
  }, [name]);
  return state;
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/usePrefersColorSchemeDark.js
function usePrefersColorSchemeDark() {
  return useMatchMedia("(prefers-color-scheme: dark)");
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/usePrefersColorSchemeLight.js
function usePrefersColorSchemeLight() {
  return useMatchMedia("(prefers-color-scheme: light)");
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/usePrefersReducedMotion.js
function usePrefersReducedMotion() {
  return useMatchMedia("(prefers-reduced-motion: reduce)");
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/usePrefersReducedTransparency.js
function usePrefersReducedTransparency() {
  return useMatchMedia("(prefers-reduced-transparency: reduce)");
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useResizeObserver.js
var import_react13 = __toESM(require_react(), 1);
function useResizeObserver(element, options, observerCallback) {
  (0, import_react13.useEffect)(() => {
    if (!element || !("ResizeObserver" in window)) {
      return void 0;
    }
    const observer = new ResizeObserver(observerCallback);
    observer.observe(element, options);
    return () => {
      observer.disconnect();
    };
  }, [element, options, observerCallback]);
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useScrollLeft.js
var import_react14 = __toESM(require_react(), 1);
var isBrowser6 = typeof window !== "undefined";
function useScrollLeft() {
  const [scrollLeft, setScrollLeft] = (0, import_react14.useState)(isBrowser6 ? window.scrollX : null);
  const getScrollLeft = (0, import_react14.useCallback)(() => setScrollLeft(window.scrollX), []);
  useEventListener(isBrowser6 ? document : null, "scroll", getScrollLeft);
  return scrollLeft;
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useWindowWidth.js
var import_react15 = __toESM(require_react(), 1);
var isBrowser7 = typeof window !== "undefined";
function useWindowWidth() {
  const [windowWidth, setWindowWidth] = (0, import_react15.useState)(isBrowser7 ? window.innerWidth : null);
  const getWindowWidth = (0, import_react15.useCallback)(() => setWindowWidth(window.innerWidth), []);
  useEventListener(isBrowser7 ? window : null, "resize", getWindowWidth);
  return windowWidth;
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useScrollLeftPercent.js
function useScrollLeftPercent() {
  const scrollLeft = useScrollLeft();
  const windowWidth = useWindowWidth();
  if (scrollLeft === null || windowWidth === null) {
    return null;
  }
  const { scrollWidth } = document.documentElement;
  if (scrollWidth === 0) {
    return 0;
  }
  return scrollLeft / Math.max(0, scrollWidth - windowWidth);
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useScrollTop.js
var import_react16 = __toESM(require_react(), 1);
var isBrowser8 = typeof window !== "undefined";
function useScrollTop() {
  const [scrollTop, setScrollTop] = (0, import_react16.useState)(isBrowser8 ? window.scrollY : null);
  const getScrollTop = (0, import_react16.useCallback)(() => setScrollTop(window.scrollY), []);
  useEventListener(isBrowser8 ? document : null, "scroll", getScrollTop);
  return scrollTop;
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useWindowHeight.js
var import_react17 = __toESM(require_react(), 1);
var isBrowser9 = typeof window !== "undefined";
function useWindowHeight() {
  const [windowHeight, setWindowHeight] = (0, import_react17.useState)(isBrowser9 ? window.innerHeight : null);
  const getWindowHeight = (0, import_react17.useCallback)(() => setWindowHeight(window.innerHeight), []);
  useEventListener(isBrowser9 ? window : null, "resize", getWindowHeight);
  return windowHeight;
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useScrollTopPercent.js
function useScrollTopPercent() {
  const scrollTop = useScrollTop();
  const windowHeight = useWindowHeight();
  if (scrollTop === null || windowHeight === null) {
    return null;
  }
  const { scrollHeight } = document.documentElement;
  if (scrollHeight === 0) {
    return 0;
  }
  return scrollTop / Math.max(0, scrollHeight - windowHeight);
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useSetInterval.js
var import_react18 = __toESM(require_react(), 1);
function useSetInterval(fn, delay) {
  (0, import_react18.useEffect)(() => {
    const interval = setInterval(fn, delay);
    return () => clearInterval(interval);
  }, [fn, delay]);
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useTick.js
var import_react19 = __toESM(require_react(), 1);
function useTick(delay = 1e3) {
  const [tick, setTick] = (0, import_react19.useState)(0);
  const doTick = (0, import_react19.useCallback)(() => {
    setTick((prevTick) => prevTick + 1);
  }, []);
  useSetInterval(doTick, delay);
  return tick;
}

// node_modules/@wojtekmaj/react-hooks/dist/esm/useToggle.js
var import_react20 = __toESM(require_react(), 1);
function useToggle(defaultValue = false) {
  const [value, setValue] = (0, import_react20.useState)(defaultValue);
  const toggleValue = () => setValue((prevValue) => !prevValue);
  return [value, toggleValue];
}
export {
  useCurrentPosition,
  useDebouncedEffect,
  useDebouncedState,
  useDebouncedValue,
  useEventListener,
  useIntersectionObserver,
  useLocalStorage,
  useMatchMedia,
  useMutationObserver,
  useOnLine,
  usePermissionState,
  usePrefersColorSchemeDark,
  usePrefersColorSchemeLight,
  usePrefersReducedMotion,
  usePrefersReducedTransparency,
  useResizeObserver,
  useScrollLeft,
  useScrollLeftPercent,
  useScrollTop,
  useScrollTopPercent,
  useSetInterval,
  useSetTimeout,
  useTick,
  useToggle,
  useWindowHeight,
  useWindowWidth
};
//# sourceMappingURL=@wojtekmaj_react-hooks.js.map
